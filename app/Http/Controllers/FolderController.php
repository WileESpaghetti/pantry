<?php

declare(strict_types=1);

namespace App\Http\Controllers;

use App\Http\Requests\FolderStoreRequest;
use App\Http\Requests\FolderUpdateRequest;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory as ViewFactory;
use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\Redirector;
use Illuminate\Support\Facades\Auth;
use Pantry\Repositories\FolderRepository;
use Pantry\Folder;

class FolderController extends Controller
{
    const DEFAULT_PAGE_SIZE = 25; // FIXME read from configuration setting
    private FolderRepository $folderRepo;
    public function __construct(FolderRepository $folderRepo)
    {
        $this->folderRepo = $folderRepo;
    }

    /**
     * Display a listing of the resource.
     *
     * @return Application|View|ViewFactory
     */
    public function index(): Application|View|ViewFactory
    {
        $user = Auth::user();
        $folders = Folder::whereBelongsTo($user)->paginate(self::DEFAULT_PAGE_SIZE);

        return view('folders.index', ['folders' => $folders]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return Application|View|ViewFactory
     */
    public function create(): Application|View|ViewFactory
    {
        return view('folders.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param FolderStoreRequest $request
     * @return RedirectResponse
     */
    public function store(FolderStoreRequest $request): RedirectResponse
    {
        $folder = $this->folderRepo->createForUser(
            $request->user(),
            $request
                ->safe()
                ->merge(['color' => '#ffddee']) // FIXME this needs to be autogenerated
                ->all() // FIXME might not want to use all because we could be including stuff like CSR token or other data that is required by request, but not model
        );

        if (!$folder) {
            return back()
                ->withErrors(['save' => __('messages.folder.create.fail', ['name' => $request->safe(['name'])['name']])])
                ->withInput();
        }

        return redirect('folders')
            ->with('success', __('messages.folder.create.success', ['name' => $folder->name]));
    }

    /**
     * Display the specified resource.
     *
     * @param Folder $folder
     * @return Application|View|ViewFactory
     */
    public function show(Folder $folder): Application|View|ViewFactory
    {
        $bookmarks = $folder->bookmarks()->paginate(self::DEFAULT_PAGE_SIZE);

        return view('bookmarks.index', ['bookmarks' => $bookmarks]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param Folder $folder
     * @return Application|View|ViewFactory
     */
    public function edit(Folder $folder): Application|View|ViewFactory
    {
        return view('folders.edit', compact('folder'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param FolderUpdateRequest $request
     * @param Folder $folder
     * @return Application|RedirectResponse|Redirector
     */
    public function update(FolderUpdateRequest $request, Folder $folder): Redirector|RedirectResponse|Application
    {
        $folder = $this->folderRepo->update($folder, $request->safe()->all());
        if (!$folder) {
            return back()
                ->withErrors(['error' => __('messages.folder.update.failed', ['name' => $request->safe('name')['name']])])
                ->withInput();
        }

        return redirect('folders')
            ->with('success', __('messages.folder.update.success', ['name' => $folder->name]));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param Folder $folder
     * @return Application|Redirector|RedirectResponse
     */
    public function destroy(Folder $folder): Redirector|RedirectResponse|Application
    {
        // TODO should delete bookmarks in the folder or move the bookmarks to the specified folder
        $wasDeleted = $this->folderRepo->delete($folder);
        if (!$wasDeleted) {
            return redirect('folders')
                ->with('errors', [__('messages.folder.delete.fail', ['name' => $folder->name])]);
        }

        return redirect('folders')
            ->with('success', __('messages.folder.delete.success', ['name' => $folder->name]));
    }
}
