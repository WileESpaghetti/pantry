<?php

declare(strict_types=1);

namespace App\Http\Controllers;

use App\Http\Requests\TagStoreRequest;
use App\Http\Requests\TagUpdateRequest;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\View\Factory as ViewFactory;
use Illuminate\Contracts\View\View;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\QueryException;
use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\Redirector;
use Illuminate\Support\Facades\Auth;
use Pantry\Tag;

class TagController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return Application|ViewFactory|View
     */
    public function index()
    {
        $user = Auth::user();
        $tags = Tag::whereBelongsTo($user)->paginate(25);

        return view('tags.index', ['tags' => $tags]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return Application|View|ViewFactory
     */
    public function create()
    {
        return view('tags.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param TagStoreRequest $request
     * @return RedirectResponse
     */
    public function store(TagStoreRequest $request)
    {
        $user = Auth::user();

        $tag = Tag::make(
            $request->safe()
            ->merge(['color' => '#ffddee']) // FIXME this needs to be autogenerated
            ->all()
        ); // FIXME might not want to use all because we could be including stuff like CSR token or other data that is required by request, but not model
        $tag->user()->associate($user);

        try {
            $tag->save();
        } catch (QueryException $qe) {
            // TODO handle specific SQL errors
            return back()
                ->withErrors(['save' => __('Could not save tag')])
                ->withInput();
        }

        return redirect('tags')
            ->with('success', __('The tag :name has been created.', ['name' => $tag->name])); // FIXME make :name bold
    }

    /**
     * Display the specified resource.
     *
     * @param  \Pantry\Tag  $tag
     * @return \Illuminate\Http\Response
     */
    public function show(Tag $tag)
    {
        $bookmarks = $tag->bookmarks()->paginate(100);

        // FIXME URL should use tag name instead of ID
        // FIXME template needs to use tag name as the header
        // FIXME needs tag specific empty template
        return view('bookmarks.index', ['notifications' => Collection::empty(), 'bookmarks' => $bookmarks]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \Pantry\Tag  $tag
     * @return Application|View|ViewFactory
     */
    public function edit(Tag $tag)
    {
        return view('tags.edit', compact('tag'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Pantry\Tag  $tag
     * @return Application|RedirectResponse|Redirector
     */
    public function update(TagUpdateRequest $request, Tag $tag): Redirector|RedirectResponse|Application
    {
        try {
            $tag->update($request->safe()->all()); // FIXME using all considered unsafe
        } catch (QueryException $qe) {
            // TODO handle specific SQL errors
            return back()
                ->withErrors(['save' => __('Could not save tag')])
                ->withInput();
        }

        return redirect('tags')
            ->with('success', __('The tag :name has been updated.', ['name' => $tag->name])); // FIXME make :name bold
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \Pantry\Tag  $tag
     * @return \Illuminate\Http\Response
     */
    public function destroy(Tag $tag)
    {
        $tag->bookmarks()->detach();
        $tag->delete();

        return redirect('tags')->with('success', __('The tag :name has been deleted.', ['name' => $tag->name])); // FIXME make :name bold
    }
}
